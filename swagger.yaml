swagger: "2.0"
info:
  description: "This is a sample server for the JukeBox"
  version: "1.0.0"
  title: "JukeBox"
  termsOfService: "http://jukebox.io/terms/"
  contact:
    email: "apiteam@jukebox.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.jukebox.io"
basePath: "/v2"
tags:
- name: "songs"
  description: "Everything about songs ops"
  externalDocs:
    description: "Find out more"
    url: "http://jukebox.io"
- name: "album"
  description: "Access to Album"
- name: "player"
  description: "Operations about player"
  externalDocs:
    description: "Find out more about our store"
    url: "http://jukebox.io"
- name: "playlist"
  description: "Everything about the playlist"
schemes:
- "https"
- "http"
paths:
  /api/v1/songs:
    get:
      tags:
      - "songs"
      summary: "Returns the  JSON Array of songs"
      description: "returns the object of song with limit of 10"
      operationId: "getSongs"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Song"
  /api/v1/songs/{songId}:
    get:
      tags:
      - "songs"
      summary: "Returns the songs JSON"
      description: "returns the object of song with limit of 10"
      operationId: "getSingleSongs"
      produces:
      - "application/json"
      parameters:
      - name: "songId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Song"
  /api/v1/album:
    get:
      tags:
      - "album"
      summary: "Returns the  JSON Array of album"
      description: "returns the object of song with limit of 10"
      operationId: "geAlbums"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Album"
  /api/v1/album/{albumId}:
    get:
      tags:
      - "album"
      summary: "Returns the songs JSON"
      description: "returns the object of song with limit of 10"
      operationId: "getSingleAlbum"
      produces:
      - "application/json"
      parameters:
      - name: "albumId"
        in: "path"
        description: "ID of album to be fetch"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Album'
  /api/v1/playlist:
    get:
      tags:
      - "playlist"
      summary: "Returns the  JSON Array of playlis"
      description: "returns the object of song with limit of 10"
      operationId: "getPlaylist"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/playlist'
  /api/v1/playlist/{playlistId}:
    get:
      tags:
      - "playlist"
      summary: "Returns the songs JSON"
      description: "returns the object of song with limit of 10"
      operationId: "getSinglePlaylist"
      produces:
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of playlist fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Album'  
     
    patch:
      tags:
      - "playlist"
      summary: "Edit the playlist" 
      description: "YOu can add and remove the songs in playlist"
      responses:
        200:
          description: OK
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of playlist fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      
      - in: "body"
        name: "body"
        description: "Updated Body Of playlist"
        schema:
          $ref: '#/definitions/playlist'
        
  /api/v1/player/:
    patch:
      tags:
      - "player" 
      summary: "Songs and Albums Add into the player" 
      description: "Player is playing the songs selected by users"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: OK
      parameters:
      
      - in: "body"
        name: "body"
        description: "Updated player object"
        required: true
        schema:
          $ref: '#/definitions/Player'

  
definitions:
  Song:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      
      artist:
        type: "string"
      
      releaseDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Song"
  Album:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      artists:
        type: "string"
      releaseDate:
        type: "string"
      songs:
        type: array
        items:
          type: object
    xml:
      name: "Album"
  playlist:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      songs:
        type: array
        items:
          type: object
        
          
    xml:
      name: "playlist"
  Player:
    type: "object"
    properties:
      songs:
        type: array
        items:
          type: object
      play:
        type: "boolean"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
